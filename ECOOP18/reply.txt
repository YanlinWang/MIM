We thank the reviewers for the constructive and valuable comments. Here we try
to answer the main questions:

#Review 60A
========

> "isn't multiple overriding essential to resolving diamond inheritance
conflicts? If that is so, I think multiple overriding needs to be part
of the core calculus."

Multiple overriding isn't essential to resolving diamond inheritance
conflicts, and the paper does have a few examples that show how to deal
with such conflicts.

One important feature for diamond inheritance is the ability to
*merge* methods coming from different parents. Our calculus
supports merging methods, so it can deal with common instances of the
diamond problem. For example, here is a typical scenario
for diamond inheritance:

```
interface A {void m() {...}}
interface B extends A {void m() {...}}
interface C extends A {void m() {...}}

interface D extends B, C {void m() {...}}  // D.m overrides&merges B.m and  C.m
```

*This program is accepted* in our calculus and indeed it is presented
in diagram form in Figure 3 (case f).

*Importantly*, note that the definition of D, after desugaring
(the desugaring is mentioned in S3.1.3, page 11), is:

```
interface D extends B, C {
  void m() overrides D {...}
}
```

*Overriding the class itself* in our calculus is how we enable merging
of methods. We will make this clearer in the paper!

Multiple overriding offers a more fine-grained mechanism for merging, and can be
helpful to deal with some more complex cases of diamond inheritance, but it is
non-essential to deal with such problems. Multiple overriding would be useful in
the following situation, for example:

```
interface A {void m() {...}}
interface B {void m() {...}}
interface C {void m() {...}}

interface D extends A, B, C {
  void m() overrides A,B {...}   // overrides and merges A.m and B.m only
  void m() overrides C {...}
}
```

In this case we would like to inherit from 3 interfaces with
conflicting methods, but only merge 2 of those methods.
While we can largely simulate D without multiple overriding in our calculus
(by introducing an intermediate class), a better approach would be
to support multiple overriding natively.

As a final note we do have a formalization/implementation of multiple
overriding. 

> "Presumably C++ compilers already have figured out how to efficiently
  implement hierarchical dispatch; does hierarchical overriding pose
  any challenges in that regard?"

C++ method lookup of static calls and non-virtual calls are determined
at compile-time and optimized to be very efficient. For hierarchical
dispatch that uses C++ virtual calls, the resolution is done at
run-time by looking up the virtual tables. We haven't yet carefully
thought about changes to current implementations, but we believe that
static and non-virtual calls can remain the same, and we can change
the vtables by adding tags (which specify the branch) to functions in
vtables and change the vtable lookup algorithm accordingly.

We believe that such approach would not have a very signicant impact
on the performance of method lookup, but without an implementation
and performance experiements, this is just speculation at this point.

#Review 60B
========

> “how it can coexist with solutions for the diamond problem.”

Our model does support diamond inheritance and can deal with diamond problems.

We can deal with the diamond problem in a very similar way to the trait approach
or the Java 8 approach with default methods, although there are some minor
differences to both of these models. Our paper shows examples of the diamond
problem (see page 9 Figure 3 (d)(e)(f)) and discusses new issues that arise when
hierarchical dispatching/overriding are added (see the discussions in Sections
5.1 and 5.3).

Please see also the first reply to #Review 60A.


#Review 60C
========

> "There is no discussion of the implementation in the paper.... Did you learn
anything from the prototype?"

Thanks for pointing out this! We agree this should be discussed, we will add a
paragraph about the implementation to the paper. BTW, the supplementary material
contains the implementation, it will be visible to you after the review process.

The implementation validates all the examples presented in the paper, as stated
in the last point of the contributions (page 3). The implementation is done in
Scala, and strictly follows the type-checking rules and small-step semantics
presented in the paper. One nice feature of the implementation is that it can
show the detailed step-by-step evaluation of the program, which is great for
understanding and debugging programs & semantics. The final model of the paper
is actually a bit different from our initial models. This is partly because in
the process of implementing and proving theorems we found errors and modified
the earlier models, creating a positive feedback circle.

> Minor issues. 

We are very grateful to all the reviewers for pointing out the
typos or other minor issues. We will revise the paper accordingly.
